apiVersion: v1
kind: Template
metadata:
  name: kitchensink-pipeline
labels:
  template: kitchensink-pipeline
metadata:
  annotations:
    description: Creates a pipeline that depends on the CI/CD infrastructure
    iconClass: icon-jenkins
    tags: instant-app,jenkins,cicd,pipeline
  name: kitchensink-pipeline
message: The pipeline has been created.
parameters:
- description: Name of the project this pipeline will build.
  displayName: Project Name
  name: PROJECT_NAME
  required: true
  value: kitchen
- description: Git URL of project to build.
  displayName: Git URL
  name: GIT_URL
  required: true
  value: https://github.com/bparry02/jboss-kitchensink-micro.git
- description: Git branch of project to build.
  displayName: Git Branch
  name: GIT_BRANCH
  required: false
  value: master
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${PROJECT_NAME}
      name: ${PROJECT_NAME}-pipeline
    name: ${PROJECT_NAME}-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
             // define commands
             def ocCmd = "oc --token=`cat /var/run/secrets/kubernetes.io/serviceaccount/token` --server=https://openshift.default.svc.cluster.local --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"

             stage 'Build'
             git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
             def v = version()
             sh "${mvnCmd} clean install -DskipTests=true"

             stage 'Test and Analysis'
             parallel (
                 'Test': {
                     sh "${mvnCmd} test"
                     step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                 },
                 'Static Analysis': {
                     sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                 }
             )

             stage 'Push to Nexus'
             sh "${mvnCmd} deploy -DskipTests=true"

             stage 'Prepare Deploy'
             sh "rm -rf oc-build-kitchen-data && mkdir -p oc-build-kitchen-data/deployments"
             sh "cp kitchensink-data/target/*.war oc-build-kitchen-data/deployments/ROOT.war"

             sh "rm -rf oc-build-kitchen-ui && mkdir -p oc-build-kitchen-ui/deployments"
             sh "cp kitchensink-ui/target/*.war oc-build-kitchen-ui/deployments/ROOT.war"

             parallel (
                  'kitchensink-data Deployment': {
                     stage 'Deploy DEV'
                     // clean up. keep the image stream
                     sh "${ocCmd} delete bc,dc,svc,route -l app=kitchensink-data -n ${PROJECT_NAME}-dev"
                     // create build. override the exit code since it complains about exising imagestream
                     sh "${ocCmd} new-build --name=kitchensink-data --image-stream=jboss-eap70-openshift --binary=true --labels=app=kitchensink-data -n ${PROJECT_NAME}-dev || true"
                     // build image
                     sh "${ocCmd} start-build kitchensink-data --from-dir=oc-build-kitchen-data --wait=true -n ${PROJECT_NAME}-dev"
                     // deploy image
                     sh "${ocCmd} new-app kitchensink-data:latest -n ${PROJECT_NAME}-dev"
                     sh "${ocCmd} expose svc/kitchensink-data -n ${PROJECT_NAME}-dev"

                     //stage 'Deploy STAGE'
                     // tag for stage
                     //sh "${ocCmd} tag ${PROJECT_NAME}-dev/${PROJECT_NAME}:latest ${PROJECT_NAME}-stage/${PROJECT_NAME}:${v}"
                     // clean up. keep the imagestream
                     //sh "${ocCmd} delete bc,dc,svc,route -l app=${PROJECT_NAME} -n ${PROJECT_NAME}-stage"
                     // deploy stage image
                     //sh "${ocCmd} new-app ${PROJECT_NAME}:${v} -n ${PROJECT_NAME}-stage"
                     //sh "${ocCmd} expose svc/${PROJECT_NAME} -n ${PROJECT_NAME}-stage"

                     //stage 'Deploy PROD'
                     //input message: "Promote ${PROJECT_NAME} to PROD?", ok: "Promote"
                     // tag for prod
                     //sh "${ocCmd} tag ${PROJECT_NAME}-stage/${PROJECT_NAME}:${v} ${PROJECT_NAME}-prod/${PROJECT_NAME}:${v}"
                     // clean up. keep the imagestream
                     //sh "${ocCmd} delete bc,dc,svc,route -l app=${PROJECT_NAME} -n ${PROJECT_NAME}-prod"
                     // deploy prod image
                     //sh "${ocCmd} new-app ${PROJECT_NAME}:${v} -n ${PROJECT_NAME}-prod"
                     //sh "${ocCmd} expose svc/${PROJECT_NAME} -n ${PROJECT_NAME}-prod"
                   },
                   'kitchensink-ui Deployment': {
                     stage 'Deploy DEV'
                     // clean up. keep the image stream
                     sh "${ocCmd} delete bc,dc,svc,route -l app=kitchensink-ui -n ${PROJECT_NAME}-dev"
                     // create build. override the exit code since it complains about exising imagestream
                     sh "${ocCmd} new-build --name=kitchensink-ui --image-stream=jboss-eap70-openshift --binary=true --labels=app=kitchensink-ui -n ${PROJECT_NAME}-dev || true"
                     // build image
                     sh "${ocCmd} start-build kitchensink-ui --from-dir=oc-build-kitchen-ui --wait=true -n ${PROJECT_NAME}-dev"
                     // deploy image
                     sh "${ocCmd} new-app kitchensink-ui:latest -n ${PROJECT_NAME}-dev"
                     sh "${ocCmd} expose svc/kitchensink-ui -n ${PROJECT_NAME}-dev"
                   }
            )
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
